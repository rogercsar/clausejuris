import type { Task, Deadline, CalendarEvent, TaskType, TaskPriority, TaskStatus } from '@/types'

export const mockTasks: Task[] = [
  {
    id: 'task-001',
    title: 'Preparar Contestação - Processo 1234567',
    description: 'Elaborar contestação para processo de cobrança',
    type: 'response',
    priority: 'high',
    status: 'pending',
    processId: 'process-001',
    assignedTo: 'user-001',
    createdBy: 'user-001',
    dueDate: '2024-12-20',
    reminderDays: [7, 3, 1],
    tags: ['contestação', 'processo', 'urgente'],
    attachments: [],
    createdAt: '2024-12-10T10:00:00Z',
    updatedAt: '2024-12-10T10:00:00Z'
  },
  {
    id: 'task-002',
    title: 'Revisar Contrato de Locação',
    description: 'Revisar cláusulas do contrato de locação comercial',
    type: 'review',
    priority: 'medium',
    status: 'in_progress',
    contractId: 'contract-001',
    assignedTo: 'user-002',
    createdBy: 'user-001',
    dueDate: '2024-12-18',
    reminderDays: [3, 1],
    tags: ['contrato', 'locação', 'revisão'],
    attachments: ['contract-draft.pdf'],
    createdAt: '2024-12-12T14:30:00Z',
    updatedAt: '2024-12-12T14:30:00Z'
  },
  {
    id: 'task-003',
    title: 'Preparar Documentos para Audiência',
    description: 'Organizar documentos necessários para audiência de conciliação',
    type: 'document_preparation',
    priority: 'urgent',
    status: 'pending',
    processId: 'process-002',
    assignedTo: 'user-001',
    createdBy: 'user-001',
    dueDate: '2024-12-15',
    reminderDays: [7, 3, 1],
    tags: ['audiência', 'documentos', 'urgente'],
    attachments: [],
    createdAt: '2024-12-08T09:15:00Z',
    updatedAt: '2024-12-08T09:15:00Z'
  },
  {
    id: 'task-004',
    title: 'Pesquisar Jurisprudência - Danos Morais',
    description: 'Pesquisar jurisprudência sobre danos morais em acidentes de trânsito',
    type: 'research',
    priority: 'medium',
    status: 'completed',
    processId: 'process-003',
    assignedTo: 'user-003',
    createdBy: 'user-001',
    dueDate: '2024-12-10',
    completedAt: '2024-12-09T16:45:00Z',
    reminderDays: [3, 1],
    tags: ['pesquisa', 'jurisprudência', 'danos morais'],
    attachments: ['jurisprudence-research.pdf'],
    createdAt: '2024-12-05T11:20:00Z',
    updatedAt: '2024-12-09T16:45:00Z'
  },
  {
    id: 'task-005',
    title: 'Reunião com Cliente - Contrato de Prestação de Serviços',
    description: 'Reunião para discutir termos do contrato de prestação de serviços',
    type: 'meeting',
    priority: 'high',
    status: 'pending',
    contractId: 'contract-002',
    assignedTo: 'user-001',
    createdBy: 'user-001',
    dueDate: '2024-12-22',
    reminderDays: [7, 1],
    tags: ['reunião', 'cliente', 'contrato'],
    attachments: [],
    createdAt: '2024-12-13T08:00:00Z',
    updatedAt: '2024-12-13T08:00:00Z'
  }
]

export const mockDeadlines: Deadline[] = [
  {
    id: 'deadline-001',
    title: 'Prazo para Contestação',
    description: 'Prazo legal para apresentação de contestação',
    type: 'contesting',
    processId: 'process-001',
    dueDate: '2024-12-20',
    isCompleted: false,
    reminderDays: [15, 7, 3, 1],
    autoGenerated: true,
    createdAt: '2024-12-05T10:00:00Z',
    updatedAt: '2024-12-05T10:00:00Z'
  },
  {
    id: 'deadline-002',
    title: 'Prazo para Apelação',
    description: 'Prazo para interposição de apelação',
    type: 'appeal',
    processId: 'process-002',
    dueDate: '2024-12-25',
    isCompleted: false,
    reminderDays: [15, 7, 3, 1],
    autoGenerated: true,
    createdAt: '2024-12-10T14:30:00Z',
    updatedAt: '2024-12-10T14:30:00Z'
  },
  {
    id: 'deadline-003',
    title: 'Vencimento de Contrato',
    description: 'Data de vencimento do contrato de locação',
    type: 'contract_renewal',
    contractId: 'contract-001',
    dueDate: '2024-12-31',
    isCompleted: false,
    reminderDays: [30, 15, 7, 1],
    autoGenerated: true,
    createdAt: '2024-12-01T09:00:00Z',
    updatedAt: '2024-12-01T09:00:00Z'
  },
  {
    id: 'deadline-004',
    title: 'Audiência de Conciliação',
    description: 'Audiência de conciliação marcada pelo juiz',
    type: 'hearing',
    processId: 'process-002',
    dueDate: '2024-12-18',
    isCompleted: false,
    reminderDays: [7, 3, 1],
    autoGenerated: false,
    createdAt: '2024-12-12T11:15:00Z',
    updatedAt: '2024-12-12T11:15:00Z'
  },
  {
    id: 'deadline-005',
    title: 'Pagamento de Honorários',
    description: 'Prazo para pagamento de honorários advocatícios',
    type: 'payment',
    processId: 'process-003',
    dueDate: '2024-12-28',
    isCompleted: false,
    reminderDays: [7, 3, 1],
    autoGenerated: true,
    createdAt: '2024-12-14T16:20:00Z',
    updatedAt: '2024-12-14T16:20:00Z'
  }
]

export const mockCalendarEvents: CalendarEvent[] = [
  {
    id: 'event-001',
    title: 'Audiência de Conciliação - Processo 1234567',
    description: 'Audiência de conciliação para tentativa de acordo',
    type: 'hearing',
    startDate: '2024-12-18T14:00:00Z',
    endDate: '2024-12-18T16:00:00Z',
    allDay: false,
    location: 'Fórum Central - Sala 205',
    attendees: ['user-001', 'client-001'],
    processId: 'process-001',
    reminderMinutes: [1440, 60], // 24h e 1h antes
    createdAt: '2024-12-10T10:00:00Z',
    updatedAt: '2024-12-10T10:00:00Z'
  },
  {
    id: 'event-002',
    title: 'Reunião com Cliente - Contrato',
    description: 'Reunião para discussão de termos contratuais',
    type: 'client_meeting',
    startDate: '2024-12-22T10:00:00Z',
    endDate: '2024-12-22T11:30:00Z',
    allDay: false,
    location: 'Escritório - Sala de Reuniões',
    attendees: ['user-001', 'client-002'],
    contractId: 'contract-002',
    reminderMinutes: [1440, 30], // 24h e 30min antes
    createdAt: '2024-12-13T08:00:00Z',
    updatedAt: '2024-12-13T08:00:00Z'
  },
  {
    id: 'event-003',
    title: 'Prazo para Contestação',
    description: 'Último dia para apresentação de contestação',
    type: 'deadline',
    startDate: '2024-12-20T00:00:00Z',
    allDay: true,
    processId: 'process-001',
    deadlineId: 'deadline-001',
    reminderMinutes: [1440, 480], // 24h e 8h antes
    createdAt: '2024-12-05T10:00:00Z',
    updatedAt: '2024-12-05T10:00:00Z'
  },
  {
    id: 'event-004',
    title: 'Reunião Interna - Planejamento',
    description: 'Reunião semanal de planejamento da equipe',
    type: 'internal_meeting',
    startDate: '2024-12-16T09:00:00Z',
    endDate: '2024-12-16T10:00:00Z',
    allDay: false,
    location: 'Escritório - Sala de Conferências',
    attendees: ['user-001', 'user-002', 'user-003'],
    reminderMinutes: [60], // 1h antes
    createdAt: '2024-12-09T15:30:00Z',
    updatedAt: '2024-12-09T15:30:00Z'
  }
]

export function getTasksByStatus(status: TaskStatus): Task[] {
  return mockTasks.filter(task => task.status === status)
}

export function getTasksByPriority(priority: TaskPriority): Task[] {
  return mockTasks.filter(task => task.priority === priority)
}

export function getTasksByProcess(processId: string): Task[] {
  return mockTasks.filter(task => task.processId === processId)
}

export function getTasksByContract(contractId: string): Task[] {
  return mockTasks.filter(task => task.contractId === contractId)
}

export function getOverdueTasks(): Task[] {
  const today = new Date()
  return mockTasks.filter(task => {
    const dueDate = new Date(task.dueDate)
    return dueDate < today && task.status !== 'completed'
  })
}

export function getUpcomingTasks(days: number = 7): Task[] {
  const today = new Date()
  const futureDate = new Date(today.getTime() + days * 24 * 60 * 60 * 1000)
  
  return mockTasks.filter(task => {
    const dueDate = new Date(task.dueDate)
    return dueDate >= today && dueDate <= futureDate && task.status !== 'completed'
  })
}

export function getDeadlinesByProcess(processId: string): Deadline[] {
  return mockDeadlines.filter(deadline => deadline.processId === processId)
}

export function getDeadlinesByContract(contractId: string): Deadline[] {
  return mockDeadlines.filter(deadline => deadline.contractId === contractId)
}

export function getUpcomingDeadlines(days: number = 7): Deadline[] {
  const today = new Date()
  const futureDate = new Date(today.getTime() + days * 24 * 60 * 60 * 1000)
  
  return mockDeadlines.filter(deadline => {
    const dueDate = new Date(deadline.dueDate)
    return dueDate >= today && dueDate <= futureDate && !deadline.isCompleted
  })
}

export function getCalendarEventsByDate(date: string): CalendarEvent[] {
  const targetDate = new Date(date)
  return mockCalendarEvents.filter(event => {
    const eventDate = new Date(event.startDate)
    return eventDate.toDateString() === targetDate.toDateString()
  })
}

export function getCalendarEventsByRange(startDate: string, endDate: string): CalendarEvent[] {
  const start = new Date(startDate)
  const end = new Date(endDate)
  
  return mockCalendarEvents.filter(event => {
    const eventDate = new Date(event.startDate)
    return eventDate >= start && eventDate <= end
  })
}

export function createTask(task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>): Task {
  const newTask: Task = {
    ...task,
    id: `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
  
  mockTasks.push(newTask)
  return newTask
}

export function updateTask(taskId: string, updates: Partial<Task>): Task | null {
  const taskIndex = mockTasks.findIndex(task => task.id === taskId)
  if (taskIndex === -1) return null
  
  mockTasks[taskIndex] = {
    ...mockTasks[taskIndex],
    ...updates,
    updatedAt: new Date().toISOString()
  }
  
  return mockTasks[taskIndex]
}

export function completeTask(taskId: string): Task | null {
  return updateTask(taskId, {
    status: 'completed',
    completedAt: new Date().toISOString()
  })
}

export function getTaskStats() {
  const stats = {
    total: mockTasks.length,
    byStatus: {} as Record<TaskStatus, number>,
    byPriority: {} as Record<TaskPriority, number>,
    byType: {} as Record<TaskType, number>,
    overdue: getOverdueTasks().length,
    upcoming: getUpcomingTasks(7).length,
    completed: mockTasks.filter(task => task.status === 'completed').length
  }

  mockTasks.forEach(task => {
    stats.byStatus[task.status] = (stats.byStatus[task.status] || 0) + 1
    stats.byPriority[task.priority] = (stats.byPriority[task.priority] || 0) + 1
    stats.byType[task.type] = (stats.byType[task.type] || 0) + 1
  })

  return stats
}
